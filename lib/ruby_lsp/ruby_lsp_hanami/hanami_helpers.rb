# typed: true
# frozen_string_literal: true
require_relative "key_forest"

module RubyLsp
  # top level comment
  #
  module Hanami
    extend T::Sig

    @key_forest = nil
    # dumb
    CONTAINERS = %w[deps app].freeze

    def self.container_keys
      @container_keys
    end

    def self.add_key_entry(key, value)
      @key_forest = KeyForest.new if @key_forest.nil?
      # convert key to downcase snake case
      # taken from: https://gist.github.com/cjmeyer/4268723
      key = key.is_a?(Array) ? key.join(".") : key
      formatted_key = key.gsub(/([A-Z]+)([A-Z][a-z])/, '\1_\2')
                         .gsub(/([a-z])([A-Z])/, '\1_\2')
                         .downcase

      @key_forest.add_entry(key: formatted_key, entry: value)
    end

    # optionally pass in the index generated by the RubyLsp
    # if not given, only search our own index
    def self.get_entries(key:, lsp_index: nil)
      return [] if @key_forest.nil? && lsp_index.nil?

      matched = if @key_forest.nil?
                  []
                else
                  [@key_forest.entry(key: key)] || []
                end

      unless lsp_index.nil?
        matched += lsp_index.resolve(key.split(".").last,
                                       key.split(".")[0, key.split(".").length - 1]) || []
      end

      matched.uniq!
      matched
    end

    def self.container_key?(key:)
      return false if @key_forest.nil?

      @key_forest.key?(key: key)
    end

    def self.completion_options(key:)
      return [] if @key_forest.nil?

      @key_forest.completion_options(key: key)
    end
  end
end
